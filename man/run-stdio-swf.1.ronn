run-stdio-swf(1) -- run ActionScript programs using stdio.as
============================================================

## SYNOPSIS

`run-stdio-swf` <app>.swf <arguments>...<br>
`run-stdio-swf` <app>.swf &lt; <data> &gt; <result> 2&gt; <log><br>
<name>=<value> `run-stdio-swf` <app>.swf<br>
`run-stdio-swf` <app>.swf ; `echo` $?

## DESCRIPTION

Enable your Flash applications to process command-line arguments, read
from stdin and write to stdout/stderr, access enviroment variables,
and exit with arbitrary status codes.

## ACTIONSCRIPT API

The global `stdio.process` object provides the following operations:

  * `process.local`:
    Is this actually a local process?  (If not, most other operations
    will either do nothing, return nothing, or throw an error.)

  * `process.env`:
    The process environment.  Available both locally and on the web.
    Equivalent to the SWF query string parameters.

  * `process.argv`:
    The command-line arguments (not including the name of the SWF).

  * `process.gets`(<callback>):
    Read one line from standard input, chop off the newline, and
    pass it to <callback>.

  * `process.puts`(<text>):
    Write <text> followed by a newline to standard output.

  * `process.warn`(<text>):
    Write <text> followed by a newline to standard error.

  * `process.exit`([<status>]):
    Exit the process with code <status>. (default: 0)

  * `process.immortal`[=<value>]:
    Keep running after uncaught error? (default: true)

## ENVIRONMENT

  * `FLASHPLAYER`:
    The Flash Player executable to use.  (If not specified,
    `run-stdio-swf` will try to find one in a standard location.)

## FLASH BOILERPLATE

    package {
      import stdio.flash.Sprite
      import stdio.process

      public class hello_world extends Sprite {
        override public function main(): void {
          process.puts("Hello, World!")
        }
      }
    }

## FLEX 4 BOILERPLATE

    <stdio:Application
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:stdio="stdio.spark.*">
      <stdio:main>
        import stdio.process

        process.puts("Hello, World!")
      </stdio:main>
    </stdio:Application>

## EXAMPLES

    $ run-stdio-swf echo.swf 1 2 3
    1 2 3

    $ FOO_DB=http://localhost:5984/foo run-stdio-swf foo.swf 2>error.log
    foo: started
    foo: connecting to database: http://localhost:5984/foo

## HOW IT WORKS

The `run-stdio-swf` wrapper sets up one web server (for serving the
SWF and accepting commands, like `exit`) and three raw TCP servers
(for piping `stdin`, `stdout` and `stderr`).  It then starts Flash
Player, passing the URL of the web server, the port numbers of the IO
servers, and the command-line arguments, as special query string
parameters to the SWF.  Environment variables are passed through the
same way, verbatim.

## LOW-LEVEL STREAM API

The regular input/output API is line-based.  If you need more control,
you can access the underlying stream objects.

  * `process.stdin`, `process.stdout`, `process.stderr`:
    Low-level access to the IO streams.

  * <input_stream>.`ready`:
    Is there data available on <input_stream> right now?

  * <input_stream>.`read`(<callback>):
    Read some data from <input_stream> and pass it to <callback>.

  * <output_stream>.`write`(<text>):
    Write <text> to <output_stream>.

  * <output_stream>.`close`():
    Close <output_stream>.

## LIMITATIONS

Only tested on Mac OS X so far.

Currently, `run-stdio-swf` cannot answer `<policy-file-request/>` queries.
Therefore, you must run a global policy file server on port _843_.

No support for signal handlers yet.

## COPYRIGHT

Copyright (C) 2011, 2012&nbsp; Daniel Brockman ([@dbrock][])

[@dbrock]: http://twitter.com/dbrock

## WEBSITE

GitHub project page: [http://github.com/dbrock/stdio.as][stdio.as]

[stdio.as]: [http://github.com/dbrock/stdio.as]
