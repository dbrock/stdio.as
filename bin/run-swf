#!/usr/bin/env node
// -*- mode: javascript -*-

var ChildProcess = require("child_process")
var FS = require("fs")
var HTTP = require("http")
var Net = require("net")
var Path = require("path")
var URL = require("url")
var inspect = require("util").inspect
var fmt = require("util").format

var FLASHPLAYER_PROGRAM_GETTERS = [
  get_FLASHPLAYER_program,
  get_osx_flash_player_debugger_app_program,
  get_osx_flash_player_app_program
]

process.stdin.pause()

process.on("SIGINT", function () {
  process.stderr.write("\n")
  process.exit(1)
})

process.on("exit", function () {
  kill_flashplayer()
})

var flashplayer_process

function kill_flashplayer() {
  if (flashplayer_process) {
    flashplayer_process.kill("SIGKILL")
  }
}

process.on("uncaughtException", function (error) {
  kill_flashplayer()
  fatal_error("internal error: " + error.stack)
})

function fatal_error(error) {
  var message = error instanceof Error ? error.message : error

  console.error("run-swf: " + message)
  process.exit(-1)
}

var verbose = false

function trace() {
  if (verbose) {
    fmt.apply(null, arguments).split("\n").forEach(function (line) {
      console.warn("run-swf: %s", line)
    })
  }
}

if (process.argv[2] === "--verbose") {
  verbose = true
  process.argv.splice(2, 1)
  trace("verbose mode on")
}

if (process.argv.length >= 3) {
  run_swf(process.argv[2], process.argv.slice(3))
} else {
  console.error("\
Usage: run-swf [--verbose] PROGRAM.swf [ARGUMENTS...]")
  process.exit(1)
}

function trace_call(name, args) {
  trace("%s(%s)", name, [].slice.call(args).map(function (arg) {
    return inspect(arg)
  }).join(", "))
}

function run_swf(filename, argv) {
  var swf_file = FS.createReadStream(filename)

  swf_file.pause()
  swf_file.on("error", fatal_error)

  open_http_server({
    "GET /": function (request, response) {
      response.writeHead(200, {
        "content-type": "application/x-shockwave-flash"
      })

      trace("sending file: %s", filename)
      trace("waiting for connections...")

      swf_file.pipe(response)
      swf_file.resume()
    },
    "POST /exit": function (request, response, errback) {
      slurp(request, function (data) {
        if (data.match(/^-?\d+$/)) {
          process.exit(parseInt(data))
        } else {
          errback("Bad exit status: " + data)
        }
      })
    },
    "POST /error": function (request, response, errback) {
      slurp(request, function (data) {
        dump_runtime_error(data)
        response.end()
      })
    },
    "POST /async-error": function (request, response, errback) {
      slurp(request, function (data) {
        dump_async_runtime_error(data)
        response.end()
      })
    }
  }, function (http_port) {
    open_stdio_servers(function (stdin_port, stdout_port, stderr_port) {
      open_readline_server(function (readline_port) {
        var url = "http://localhost:" + http_port

        process.env["stdio.service"] = url
        process.env["stdio.argv"] = argv.map(encodeURIComponent).join(" ")
        process.env["stdio.in"] = stdin_port
        process.env["stdio.out"] = stdout_port
        process.env["stdio.err"] = stderr_port
        process.env["stdio.readline"] = readline_port

        run_flashplayer(url, process.env)
      })
    })
  })
}

function open_readline_server(callback) {
  open_server(function (socket) {
    trace("got readline connection")

    process.stdin.resume()

    var readline = require("readline").createInterface(
      process.stdin, process.stdout
    ).on("line", function (line) {
      trace("read line: %s", inspect(line))
      lines.push(line)
      feed()
    }).on("close", function () {
      trace("readline: close")
      socket.end()
    })

    var n_prompts = 0
    var lines = []

    function feed() {
      while (lines.length && n_prompts) {
        trace("sending line: %s", inspect(lines[0]))
        socket.write(lines.shift() + "\n")
        --n_prompts
      }
    }

    function ask(prompt) {
      trace("got prompt: %s", inspect(prompt))
      readline.setPrompt(prompt, strip_colors(prompt).length)
      readline.prompt()
      ++n_prompts
      feed()
    }

    function strip_colors(string) {
      return string.replace(/\x1b\[\d+(;\d+)?m/g, "")
    }

    function say(line) {
      trace("got output: %s", inspect(line))
      console.log("%s", line)
    }

    var buffer = ""

    socket.on("data", function (data) {
      var line, index

      trace("got readline data: %s", inspect(data.toString()))
      buffer += data.toString()

      while (~(index = buffer.indexOf("\n"))) {
        line = buffer.slice(0, index)
        buffer = buffer.slice(index + 1)

        if (line.charAt(0) === "?") {
          ask(line.slice(1))
        } else {
          say(line.replace(/^!/, ""))
        }
      }
    })
  }, function (port) {
    trace("readline server started on port %d", port)
    callback(port)
  })
}

function dump_runtime_error(data) {
  var lines = data.split(/\r?\n/)
  var message = get_pretty_error_message(lines.shift())

  draw_horizontal_rule()

  lines.forEach(function (line, index) {
    var match = line.match(/([^:\/\[]+)\[(.*):(\d+)\]/)

    if (match) {
      var method = match[1]
      var filename = Path.relative(process.cwd(), match[2])
      var line_number = match[3]
      var text = index === 0 ? fmt("error: %s ", message) : ""
      var content = fmt("%s:%s: %s", filename, line_number, text)
      var suffix = fmt(" in %s", method)
      var pad_length = Math.max(0, 80 - content.length - suffix.length)
      var padding = repeat(" ", pad_length)

      console.warn(content + padding + suffix)
    } else {
      if (index === 0) {
        console.warn("error: %s", message)
      }

      console.warn(line)
    }
  })

  function repeat(string, n) {
    return new Array(n + 1).join(string)
  }

  function draw_horizontal_rule() {
    console.warn(repeat("\u2014", 80))
  }
}

function dump_async_runtime_error(data) {
  console.warn(
    "run-swf: error: event: %s",
    get_pretty_async_error_message(data)
  )
}

function get_pretty_async_error_message(data) {
  var match = data.trim().match(/^\[(\S+).*? text="(.*)"\]$/)

  if (match) {
    return get_pretty_error_message(fmt("%s: %s", match[1], match[2]))
  } else {
    return data
  }
}

function get_pretty_error_message(message) {
  var match

  if (message === "TypeError: Error #1009: Cannot access a property or method of a null object reference.") {
    return "null pointer"
  } else if ((match = message.match(/^ArgumentError: Error #1063: Argument count mismatch on .*\. Expected (\d+), got (\d+)\.$/))) {
    return fmt("expected %d arguments, got %d", match[1], match[2])
  } else if ((match = message.match(/^IOErrorEvent: Error #2032: Stream Error. URL: (.*)$/))) {
    return inspect(match[1]) + ": URL not available"
  } else {
    return message.replace(/^Error: /i, "")
  }
}

function run_flashplayer(swf_url, parameters) {
  get_flashplayer_program(function (flashplayer_program) {
    var url = swf_url + "?" + require("querystring").stringify(parameters)

    trace("FLASHPLAYER = %s", inspect(flashplayer_program))
    trace("%s", inspect(parameters))
    trace("$ flashplayer %s", encodeURI(url))

    flashplayer_process = ChildProcess.spawn(flashplayer_program, [url])

    flashplayer_process.stderr.on("data", log_flashplayer_output)
    flashplayer_process.stdout.on("data", log_flashplayer_output)

    function log_flashplayer_output(data) {
      console.warn("flashplayer: " + data)
    }

    flashplayer_process.on("error", fatal_error)
    flashplayer_process.on("exit", process.exit)
  })
}

function slurp(stream, callback) {
  var result = ""

  stream.on("data", function (data) { result += data })
  stream.on("end", function () { callback(result) })
}

function open_http_server(routes, callback) {
  bind_server(
    HTTP.createServer(function (request, response) {
      var action = request.method + " " + URL.parse(request.url).pathname

      trace("got HTTP " + action)

      if (action in routes) {
        routes[action](request, response, fail)
      } else {
        fail("unexpected")
      }

      function fail(message) {
        fatal_error("HTTP " + action + ": " + message)
      }
    }),
    callback
  )
}

function open_stdio_servers(callback) {
  open_server(function (socket) {
    trace("got stdin connection")
    process.stdin.pipe(socket)
    process.stdin.resume()
  }, function (stdin_port) {
    open_server(function (socket) {
      trace("got stdout connection")
      socket.pipe(process.stdout)
    }, function (stdout_port) {
      open_server(function (socket) {
        trace("got stderr connection")
        socket.pipe(process.stderr)
      }, function (stderr_port) {
        trace("stdio servers started on ports %d, %d, %d",
              stdin_port, stdout_port, stderr_port)
        callback(stdin_port, stdout_port, stderr_port)
      })
    })
  })
}

function open_server(handler, callback) {
  return bind_server(Net.createServer(handler), callback)
}

function get_random_integer(min, max) {
  return min + Math.floor(Math.random() * (max - min))
}

function get_random_port() {
  // Standard IANA dynamic port range.
  return get_random_integer(0xc000, 0x10000)
}

function bind_server(server, callback) {
  server.on("error", function (error) {
    if (error.code == "EADDRINUSE") {
      trace("got EADDRINUSE for %d; trying another port", port)
      bind_server(server, callback)
    } else {
      throw error
    }
  })

  var port = get_random_port()

  server.listen(port, function () {
    callback(port)
  })
}

function get_flashplayer_program(callback) {
  loop(0)

  function loop(i) {
    FLASHPLAYER_PROGRAM_GETTERS[i](function (program) {
      if (program) {
        callback(program)
      } else {
        if (i + 1 === FLASHPLAYER_PROGRAM_GETTERS.length) {
          fatal_error("no flashplayer executable found")
        } else {
          loop(i + 1)
        }
      }
    })
  }
}

function get_osx_flash_player_debugger_app_program(callback) {
  get_osx_app_program("Flash Player Debugger", callback)
}

function get_osx_flash_player_app_program(callback) {
  get_osx_app_program("Flash Player", callback)
}

function get_osx_app_program(name, callback) {
  get_program(
    "/Applications/" + name + ".app/Contents/MacOS/" + name,
    callback
  )
}

function get_FLASHPLAYER_program(callback) {
  if (process.env.FLASHPLAYER) {
    get_program(process.env.FLASHPLAYER, callback)
  } else {
    callback(null)
  }
}

function get_program(filename, callback) {
  Path.exists(filename, function (exists) {
    callback(exists ? filename : null)
  })
}
