#!/usr/bin/env node
// -*- mode: javascript -*-

var ChildProcess = require("child_process")
var FS = require("fs")
var HTTP = require("http")
var Net = require("net")
var Path = require("path")
var QueryString = require("querystring")
var Readline = require("readline")
var TTY = require("tty")
var URL = require("url")

var inspect = require("util").inspect
var fmt = require("util").format

var bind_to_random_port = require("../bind-to-random-port.js")
var get_flashplayer_program = require("../get-flashplayer-program.js")

function trace() {
  if (verbose) {
    fmt.apply(null, arguments).split("\n").forEach(function (line) {
      warn("%s", line)
    })
  }
}

function warn() {
  console.warn("run-swf: %s", fmt.apply(null, arguments))
}

function die(error) {
  warn.apply(null, arguments)
  process.exit(-1)
}

//--------------------------------------------------------------------
// Command-line options and environment variables
//--------------------------------------------------------------------
var verbose, no_stdio, no_flashplayer

if (process.env.RUN_SWF_VERBOSE === "true") {
  verbose = true
}

while (/^-/.test(process.argv[2])) {
  var option = process.argv.splice(2, 1)[0]

  if (option === "--verbose") {
    verbose = true
  } else if (option === "--no-stdio") {
    no_stdio = true
    trace("no-stdio mode")
  } else if (option === "--no-flashplayer") {
    no_flashplayer = true
    trace("no-flashplayer mode")
  } else {
    warn("error: unknown option: " + option)
    die_with_usage()
  }
}

function die_with_usage() {
  die("Usage: run-swf [--verbose] [--no-stdio] PROGRAM.swf [ARGUMENTS...]")
}

//--------------------------------------------------------------------
// Low-level entry-point
//--------------------------------------------------------------------
var flashplayer_process, http_server
var stdio_sockets = []

// Pause standard input until weâ€™re connected to the Flash process.
process.stdin.pause()

process.on("SIGINT", function () {
  process.stderr.write("\n")
  process.exit(1)
})

process.on("exit", function () {
  if (flashplayer_process) {
    flashplayer_process.kill("SIGKILL")
  }
})

process.on("uncaughtException", function (error) {
  die("internal error: %s", error.stack)
})

if (process.argv.length >= 3) {
  run_swf(process.argv[2], process.argv.slice(3))
} else {
  die_with_usage()
}

//--------------------------------------------------------------------
// Main entry point
//--------------------------------------------------------------------
function run_swf(swf_filename, argv) {
  http_server = open_http_server(swf_filename, function (http_port) {
    var url = fmt("http://localhost:%s", http_port)
    var env = process.env

    env["stdio.argv"] = argv.map(encodeURIComponent).join(" ")

    if (no_stdio) {
      run_flashplayer(url, env)
    } else {
      open_stdio_servers(function (stdin_port, stdout_port, stderr_port) {
        open_readline_server(function (readline_port) {
          env["stdio.enabled"] = true
          env["stdio.http"] = "http://localhost:" + http_port
          env["stdio.in"] = stdin_port
          env["stdio.out"] = stdout_port
          env["stdio.err"] = stderr_port
          env["stdio.readline"] = readline_port
          env["stdio.interactive"] = String(TTY.isatty(process.stdin))

          run_flashplayer(url, env)
        })
      })
    }
  })
}

function run_flashplayer(swf_url, parameters) {
  var url = fmt("%s?%s", swf_url, QueryString.stringify(parameters))

  if (no_flashplayer) {
    console.log("%s", url)
  } else {
    get_flashplayer_program(function (flashplayer_program) {
      trace("using %s as Flash Player", inspect(flashplayer_program))
      trace("flashplayer %s", url)

      flashplayer_process = ChildProcess.spawn(flashplayer_program, [url])

      flashplayer_process.stderr.on("data", log_flashplayer_output)
      flashplayer_process.stdout.on("data", log_flashplayer_output)

      function log_flashplayer_output(data) {
        console.warn("flashplayer: " + data)
      }

      flashplayer_process.on("error", function (error) {
        die("%s", error)
      })

      flashplayer_process.on("exit", function () {
        process.exit()
      })
    })
  }
}

//--------------------------------------------------------------------
// Error handling
//--------------------------------------------------------------------
function dump_runtime_error(data) {
  var lines = data.split(/\r?\n/)
  var message = get_pretty_error_message(lines.shift())

  draw_horizontal_rule()

  lines.forEach(function (line, index) {
    var match = line.match(/([^:\/\[]+)\[(.*):(\d+)\]/)

    if (match) {
      var method = match[1]
      var filename = Path.relative(process.cwd(), match[2])
      var line_number = match[3]
      var text = index === 0 ? fmt("error: %s ", message) : ""
      var content = fmt("%s:%s: %s", filename, line_number, text)
      var suffix = fmt(" in %s", method)
      var pad_length = Math.max(0, 80 - content.length - suffix.length)
      var padding = repeat(" ", pad_length)

      console.warn(content + padding + suffix)
    } else {
      if (index === 0) {
        console.warn("error: %s", message)
      }

      console.warn(line)
    }
  })

  function repeat(string, n) {
    return new Array(n + 1).join(string)
  }

  function draw_horizontal_rule() {
    console.warn(repeat("\u2014", 80))
  }
}

function get_pretty_error_message(message) {
  var match

  if (message === "TypeError: Error #1009: Cannot access a property or method of a null object reference.") {
    return "null pointer"
  } else if ((match = message.match(/^ArgumentError: Error #1063: Argument count mismatch on .*\. Expected (\d+), got (\d+)\.$/))) {
    return fmt("expected %d arguments, got %d", match[1], match[2])
  } else if ((match = message.match(/^IOErrorEvent: Error #2032: Stream Error. URL: (.*)$/))) {
    return inspect(match[1]) + ": URL not available"
  } else {
    return message.replace(/^Error: /i, "")
  }
}

//--------------------------------------------------------------------
// HTTP server, stdio servers, readline server
//--------------------------------------------------------------------
function open_http_server(swf_filename, callback) {
  var swf_file = FS.createReadStream(swf_filename)

  swf_file.pause()
  swf_file.on("error", function (error) {
    die("%s", error)
  })

  var routes = {
    "GET /favicon.ico": function (request, response) {
      response.writeHead(404)
      response.end()
    },

    "GET /": function (request, response) {
      response.writeHead(200, {
        "Content-Type": "application/x-shockwave-flash"
      })

      trace("sending file: %s", swf_filename)

      if (no_stdio) {
        trace("stdio disabled")
      } else {
        trace("waiting for stdio connections...")
      }

      swf_file.pipe(response)
      swf_file.resume()
    },

    "POST /shell": function (request, response, errback) {
      slurp(request, function (command) {
        trace("shell command: %s", command)
        ChildProcess.exec(command, function (error, stdout, stderr) {
          var status = error === null ? 0 : error.code

          trace("shell command result: %j", [status, stdout, stderr])

          response.writeHead(200, { "Content-Type": "text/xml" })
          response.write(fmt('<result status="%s">\n', status))
          response.write(fmt('  <stdout>%s</stdout>\n', xml_escape(stdout)))
          response.write(fmt('  <stderr>%s</stderr>\n', xml_escape(stderr)))
          response.write(fmt('</result>\n'))
          response.end()
        })
      })
    },

    "POST /error": function (request, response, errback) {
      slurp(request, function (data) {
        dump_runtime_error(data)
        response.end()
      })
    },

    "POST /exit": function (request, response, errback) {
      slurp(request, function (data) {
        if (data.match(/^-?\d+$/)) {
          process.exit(parseInt(data))
        } else {
          errback("Bad exit status: " + data)
        }
      })
    }
  }

  var server = HTTP.createServer(function (request, response) {
    var action = request.method + " " + URL.parse(request.url).pathname

    trace("got HTTP " + action)

    if (action in routes) {
      routes[action](request, response, fail)
    } else {
      fail("unexpected")
    }

    function fail(message) {
      die("HTTP %s: %s", action, + message)
    }
  })

  bind_to_random_port(server, function (port) {
    trace("listening to TCP %d (HTTP server)", port)
    callback(port)
  })

  return server
}

function open_stdio_servers(callback) {
  open_one_off_server(function (socket) {
    trace("got stdin connection")
    process.stdin.pipe(socket)
    process.stdin.resume()
  }, function (stdin_port) {
    open_one_off_server(function (socket) {
      stdio_sockets.push(socket)
      trace("got stdout connection")
      socket.pipe(process.stdout)
    }, function (stdout_port) {
      open_one_off_server(function (socket) {
        stdio_sockets.push(socket)
        trace("got stderr connection")
        socket.pipe(process.stderr)
      }, function (stderr_port) {
        trace("listening to TCP %d (stdin)", stdin_port)
        trace("listening to TCP %d (stdout)", stdout_port)
        trace("listening to TCP %d (stderr)", stderr_port)
        callback(stdin_port, stdout_port, stderr_port)
      })
    })
  })
}

function open_readline_server(callback) {
  open_one_off_server(function (socket) {
    trace("got readline connection")

    var readline = Readline.createInterface(
      process.stdin, process.stdout
    ).on("line", function (line) {
      trace("read line: %s", inspect(line))
      lines.push(line)
      feed()
    }).on("close", function () {
      trace("readline: close")
      socket.end()
    })

    process.stdin.resume()

    var n_prompts = 0
    var lines = []

    function feed() {
      while (lines.length && n_prompts) {
        trace("sending line: %s", inspect(lines[0]))
        socket.write(lines.shift() + "\n")
        --n_prompts
      }
    }

    function ask(prompt) {
      trace("got prompt: %s", inspect(prompt))
      readline.setPrompt(prompt, strip_colors(prompt).length)
      readline.prompt()
      ++n_prompts
      feed()
    }

    function strip_colors(string) {
      return string.replace(/\x1b\[\d+(;\d+)?m/g, "")
    }

    function say(line) {
      trace("got output: %s", inspect(line))
      console.log("%s", line)
    }

    var buffer = ""

    socket.on("data", function (data) {
      var line, index

      trace("got readline data: %s", inspect(data.toString()))
      buffer += data.toString()

      while (~(index = buffer.indexOf("\n"))) {
        line = buffer.slice(0, index)
        buffer = buffer.slice(index + 1)

        if (line.charAt(0) === "?") {
          ask(line.slice(1))
        } else {
          say(line.replace(/^!/, ""))
        }
      }
    })
  }, function (port) {
    trace("listening to TCP %d (readline)", port)
    callback(port)
  })
}

//--------------------------------------------------------------------
// Utility functions
//--------------------------------------------------------------------
function open_one_off_server(handler, callback) {
  var server = Net.createServer(function (socket) {
    server.close()
    handler(socket)
  })

  return bind_to_random_port(server, callback)
}

function slurp(stream, callback) {
  var result = ""

  stream.on("data", function (data) { result += data })
  stream.on("end", function () { callback(result) })
}

function xml_escape(string) {
  return string
    .replace(/&/g, "&amp;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
}
